# https://docs.github.com/en/packages
# https://github.com/semantic-release/semantic-release

# Exemplo criado por https://github.com/brunohafonso95
name: Release Workflow
env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Generate Release notes and Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    services:
      mongodb:
        image: mongo:4.4.5
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.MONGODB_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.MONGODB_PASSWORD }}
        ports:
          - 27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:alpine3.13
        ports:
          - 6379
      mysql:
        image: bitnami/mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Use nodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Run ESLint to check the code style
        run: yarn lint

      - name: Run Integration Tests
        env:
          DATABASE_URL: mysql://${{ env.MYSQL_USER }}:${{ env.MYSQL_ROOT_PASSWORD }}@localhost:${{ job.services.mysql.ports[3306] }}/${{ env.MYSQL_DATABASE }}
          REDIS_HOSTNAME: localhost
          REDIS_PORT: ${{ job.services.redis.ports[6379] }}
          MONGODB_PORT: ${{ job.services.mongodb.ports[27017] }}
        run: yarn test:e2e

      - name: Generate new release
        id: semantic-release
        uses: codfish/semantic-release-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: check for new release
        if: steps.semantic-release.outputs.new-release-published == 'false'
        run: |
          echo "::error ::There's no new release version."
          exit 1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: docker.pkg.github.com/${{ github.repository_owner }}/project_name/project_name:latest,docker.pkg.github.com/${{ github.repository_owner }}/project_name/project_name:${{ steps.semantic-release.outputs.release-version }}
